package org.mosaic.development.idea.make.impl.compiler;

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.compiler.*;
import com.intellij.openapi.module.Module;
import com.intellij.openapi.module.ModuleManager;
import com.intellij.openapi.progress.ProgressIndicator;
import com.intellij.openapi.util.Computable;
import com.intellij.util.containers.ContainerUtil;
import java.io.DataInput;
import java.io.IOException;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.idea.maven.model.MavenProjectProblem;
import org.jetbrains.idea.maven.project.MavenProject;
import org.jetbrains.idea.maven.project.MavenProjectsManager;
import org.jetbrains.idea.maven.server.MavenEmbedderWrapper;
import org.jetbrains.idea.maven.server.MavenServerExecutionResult;
import org.jetbrains.idea.maven.server.MavenServerManager;
import org.mosaic.development.idea.facet.OsgiBundleFacet;

import static java.util.Arrays.asList;

/**
 * @author arik
 */
public class BundleCompiler implements PackagingCompiler
{
    @Override
    public void processOutdatedItem( @NotNull CompileContext context,
                                     @NotNull String url,
                                     @Nullable ValidityState state )
    {
        // used to delete the generated jar files here, however this could lead to jar files being accidentally deleted
        // when running a run configuration that did not include the artifacts generated by this compiler (see IDEA-76731).
        // so the jar file is now deleted right before it is rebuilt in {@link #buildBundle}. The AndroidPackagingCompiler
        // and J2MEPackagingCompiler classes seem to handle it in a similar fashion.
    }

    @NotNull
    @Override
    public ProcessingItem[] getProcessingItems( @NotNull final CompileContext compileContext )
    {
        return ApplicationManager.getApplication().runReadAction( new Computable<ProcessingItem[]>()
        {
            public ProcessingItem[] compute()
            {
                Module[] affectedModules;

                if( compileContext.isRebuild() )
                {
                    affectedModules = ModuleManager.getInstance( compileContext.getProject() ).getSortedModules();
                }
                else
                {
                    CompileScope compileScope = compileContext.getCompileScope();
                    affectedModules = compileScope.getAffectedModules();
                    if( affectedModules.length == 0 )
                    {
                        return ProcessingItem.EMPTY_ARRAY;
                    }
                }

                List<ProcessingItem> result = ContainerUtil.newArrayList();
                for( Module module : affectedModules )
                {
                    OsgiBundleFacet facet = OsgiBundleFacet.getInstance( module );
                    if( facet != null )
                    {
                        result.add( new BundleProcessingItem( module, facet ) );
                    }
                }
                return result.toArray( new ProcessingItem[ result.size() ] );
            }
        } );
    }

    @Override
    public ProcessingItem[] process( @NotNull CompileContext compileContext, @NotNull ProcessingItem[] processingItems )
    {
        for( ProcessingItem processingItem : processingItems )
        {
            BundleProcessingItem bundleProcessingItem = ( BundleProcessingItem ) processingItem;
            buildBundle( bundleProcessingItem.getModule(), compileContext );
        }
        return processingItems;
    }

    private void buildBundle( @NotNull Module module, @NotNull CompileContext context )
    {
        ProgressIndicator progressIndicator = context.getProgressIndicator();
        progressIndicator.setText( "Building bundle for module " + module.getName() );
        String messagePrefix = "[" + module.getName() + "] ";

        MavenProjectsManager mavenProjectsManager = MavenProjectsManager.getInstance( module.getProject() );
        if( mavenProjectsManager == null )
        {
            return;
        }

        MavenProject mavenProject = mavenProjectsManager.findProject( module );
        if( mavenProject == null )
        {
            return;
        }

        // build bundle
        progressIndicator.setText2( "Running Maven embedder..." );
        MavenEmbedderWrapper embedder = MavenServerManager.getInstance().createEmbedder( module.getProject(), false );
        try
        {
            // run "bundle:bundle" goal, and add "intellij" profile, in case project wants to do some
            // custom stuff when inside intellij (if profile does not exist in project it's still ok)
            List<String> profiles = asList( "intellij" );
            List<String> goals = asList( "bundle:bundle" );

            progressIndicator.setText2( "Running Felix Bundle Plugin..." );
            MavenServerExecutionResult result = embedder.execute( mavenProject.getFile(), profiles, goals );
            for( MavenProjectProblem problem : result.problems )
            {
                context.addMessage( CompilerMessageCategory.ERROR,
                                    messagePrefix + problem.getDescription(),
                                    null,
                                    0,
                                    0 );
            }
        }
        catch( Exception e )
        {
            context.addMessage( CompilerMessageCategory.ERROR, messagePrefix + "Unexpected error: " + e.getMessage(),
                                null,
                                0,
                                0 );
        }
        finally
        {
            embedder.release();
        }
    }

    @NotNull
    @Override
    public String getDescription()
    {
        return "bundle compile";
    }

    @Override
    public boolean validateConfiguration( CompileScope scope )
    {
        return true;
    }

    @Override
    public ValidityState createValidityState( @NotNull DataInput in ) throws IOException
    {
        return new BundleValidityState( in );
    }
}
